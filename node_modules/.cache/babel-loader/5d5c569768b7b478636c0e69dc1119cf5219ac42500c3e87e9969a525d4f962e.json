{"ast":null,"code":"/*\n *\n * Address actions\n *\n */\n\nimport { goBack } from 'connected-react-router';\nimport { success } from 'react-notification-system-redux';\nimport axios from 'axios';\nimport { FETCH_ADDRESS, FETCH_ADDRESSES, ADDRESS_CHANGE, ADDRESS_EDIT_CHANGE, SET_ADDRESS_FORM_ERRORS, SET_ADDRESS_FORM_EDIT_ERRORS, RESET_ADDRESS, ADD_ADDRESS, REMOVE_ADDRESS, SET_ADDRESS_LOADING, ADDRESS_SELECT } from './constants';\nimport handleError from '../../utils/error';\nimport { allFieldsValidation } from '../../utils/validation';\nimport { API_URL } from '../../constants';\nexport const addressChange = (name, value) => {\n  let formData = {};\n  formData[name] = value;\n  return {\n    type: ADDRESS_CHANGE,\n    payload: formData\n  };\n};\nexport const addressEditChange = (name, value) => {\n  let formData = {};\n  formData[name] = value;\n  return {\n    type: ADDRESS_EDIT_CHANGE,\n    payload: formData\n  };\n};\nexport const handleAddressSelect = value => {\n  return {\n    type: ADDRESS_SELECT,\n    payload: value\n  };\n};\nexport const setAddressLoading = value => {\n  return {\n    type: SET_ADDRESS_LOADING,\n    payload: value\n  };\n};\nexport const fetchAddresses = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch(setAddressLoading(true));\n      const response = await axios.get(`${API_URL}/address`);\n      dispatch({\n        type: FETCH_ADDRESSES,\n        payload: response.data.addresses\n      });\n    } catch (error) {\n      handleError(error, dispatch);\n    } finally {\n      dispatch(setAddressLoading(false));\n    }\n  };\n};\n\n// fetch address api\nexport const fetchAddress = addressId => {\n  return async (dispatch, getState) => {\n    try {\n      const response = await axios.get(`${API_URL}/address/${addressId}`);\n      dispatch({\n        type: FETCH_ADDRESS,\n        payload: response.data.address\n      });\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\nexport const addAddress = () => {\n  return async (dispatch, getState) => {\n    try {\n      const rules = {\n        address: 'required',\n        city: 'required',\n        state: 'required',\n        country: 'required',\n        zipCode: 'required|min:5'\n      };\n      const newAddress = getState().address.addressFormData;\n      const isDefault = getState().address.isDefault;\n      const {\n        isValid,\n        errors\n      } = allFieldsValidation(newAddress, rules, {\n        'required.address': 'Address is required.',\n        'required.city': 'City is required.',\n        'required.state': 'State is required.',\n        'required.country': 'Country is required.',\n        'required.zipCode': 'Zipcode is required.'\n      });\n      if (!isValid) {\n        return dispatch({\n          type: SET_ADDRESS_FORM_ERRORS,\n          payload: errors\n        });\n      }\n      const address = {\n        isDefault,\n        ...newAddress\n      };\n      const response = await axios.post(`${API_URL}/address/add`, address);\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n      if (response.data.success === true) {\n        dispatch(success(successfulOptions));\n        dispatch({\n          type: ADD_ADDRESS,\n          payload: response.data.address\n        });\n        dispatch(goBack());\n        dispatch({\n          type: RESET_ADDRESS\n        });\n      }\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n\n// update address api\nexport const updateAddress = () => {\n  return async (dispatch, getState) => {\n    try {\n      const rules = {\n        country: 'required',\n        city: 'required',\n        state: 'required',\n        address: 'required',\n        zipCode: 'required'\n      };\n      const newAddress = getState().address.address;\n      const {\n        isValid,\n        errors\n      } = allFieldsValidation(newAddress, rules, {\n        'required.address': 'Address is required.',\n        'required.city': 'City is required.',\n        'required.state': 'State is required.',\n        'required.country': 'Country is required.',\n        'required.zipCode': 'Zipcode is required.'\n      });\n      if (!isValid) {\n        return dispatch({\n          type: SET_ADDRESS_FORM_EDIT_ERRORS,\n          payload: errors\n        });\n      }\n      const response = await axios.put(`${API_URL}/address/${newAddress._id}`, newAddress);\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n      if (response.data.success === true) {\n        dispatch(success(successfulOptions));\n        dispatch(goBack());\n      }\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n\n// delete address api\nexport const deleteAddress = id => {\n  return async (dispatch, getState) => {\n    try {\n      const response = await axios.delete(`${API_URL}/address/delete/${id}`);\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n      if (response.data.success === true) {\n        dispatch(success(successfulOptions));\n        dispatch({\n          type: REMOVE_ADDRESS,\n          payload: id\n        });\n        dispatch(goBack());\n      }\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};","map":{"version":3,"names":["goBack","success","axios","FETCH_ADDRESS","FETCH_ADDRESSES","ADDRESS_CHANGE","ADDRESS_EDIT_CHANGE","SET_ADDRESS_FORM_ERRORS","SET_ADDRESS_FORM_EDIT_ERRORS","RESET_ADDRESS","ADD_ADDRESS","REMOVE_ADDRESS","SET_ADDRESS_LOADING","ADDRESS_SELECT","handleError","allFieldsValidation","API_URL","addressChange","name","value","formData","type","payload","addressEditChange","handleAddressSelect","setAddressLoading","fetchAddresses","dispatch","getState","response","get","data","addresses","error","fetchAddress","addressId","address","addAddress","rules","city","state","country","zipCode","newAddress","addressFormData","isDefault","isValid","errors","post","successfulOptions","title","message","position","autoDismiss","updateAddress","put","_id","deleteAddress","id","delete"],"sources":["D:/origin tribe/mern-ecommerce-master/client/src/containers/Address/actions.js"],"sourcesContent":["/*\n *\n * Address actions\n *\n */\n\nimport { goBack } from 'connected-react-router';\nimport { success } from 'react-notification-system-redux';\nimport axios from 'axios';\n\nimport {\n  FETCH_ADDRESS,\n  FETCH_ADDRESSES,\n  ADDRESS_CHANGE,\n  ADDRESS_EDIT_CHANGE,\n  SET_ADDRESS_FORM_ERRORS,\n  SET_ADDRESS_FORM_EDIT_ERRORS,\n  RESET_ADDRESS,\n  ADD_ADDRESS,\n  REMOVE_ADDRESS,\n  SET_ADDRESS_LOADING,\n  ADDRESS_SELECT\n} from './constants';\nimport handleError from '../../utils/error';\nimport { allFieldsValidation } from '../../utils/validation';\nimport { API_URL } from '../../constants';\n\nexport const addressChange = (name, value) => {\n  let formData = {};\n  formData[name] = value;\n\n  return {\n    type: ADDRESS_CHANGE,\n    payload: formData\n  };\n};\n\nexport const addressEditChange = (name, value) => {\n  let formData = {};\n  formData[name] = value;\n\n  return {\n    type: ADDRESS_EDIT_CHANGE,\n    payload: formData\n  };\n};\n\nexport const handleAddressSelect = value => {\n  return {\n    type: ADDRESS_SELECT,\n    payload: value\n  };\n};\n\nexport const setAddressLoading = value => {\n  return {\n    type: SET_ADDRESS_LOADING,\n    payload: value\n  };\n};\n\nexport const fetchAddresses = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch(setAddressLoading(true));\n      const response = await axios.get(`${API_URL}/address`);\n      dispatch({ type: FETCH_ADDRESSES, payload: response.data.addresses });\n    } catch (error) {\n      handleError(error, dispatch);\n    } finally {\n      dispatch(setAddressLoading(false));\n    }\n  };\n};\n\n// fetch address api\nexport const fetchAddress = addressId => {\n  return async (dispatch, getState) => {\n    try {\n      const response = await axios.get(`${API_URL}/address/${addressId}`);\n\n      dispatch({\n        type: FETCH_ADDRESS,\n        payload: response.data.address\n      });\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n\nexport const addAddress = () => {\n  return async (dispatch, getState) => {\n    try {\n      const rules = {\n        address: 'required',\n        city: 'required',\n        state: 'required',\n        country: 'required',\n        zipCode: 'required|min:5'\n      };\n\n      const newAddress = getState().address.addressFormData;\n      const isDefault = getState().address.isDefault;\n\n      const { isValid, errors } = allFieldsValidation(newAddress, rules, {\n        'required.address': 'Address is required.',\n        'required.city': 'City is required.',\n        'required.state': 'State is required.',\n        'required.country': 'Country is required.',\n        'required.zipCode': 'Zipcode is required.'\n      });\n\n      if (!isValid) {\n        return dispatch({ type: SET_ADDRESS_FORM_ERRORS, payload: errors });\n      }\n\n      const address = {\n        isDefault,\n        ...newAddress\n      };\n\n      const response = await axios.post(`${API_URL}/address/add`, address);\n\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n\n      if (response.data.success === true) {\n        dispatch(success(successfulOptions));\n        dispatch({\n          type: ADD_ADDRESS,\n          payload: response.data.address\n        });\n        dispatch(goBack());\n        dispatch({ type: RESET_ADDRESS });\n      }\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n\n// update address api\nexport const updateAddress = () => {\n  return async (dispatch, getState) => {\n    try {\n      const rules = {\n        country: 'required',\n        city: 'required',\n        state: 'required',\n        address: 'required',\n        zipCode: 'required'\n      };\n\n      const newAddress = getState().address.address;\n\n      const { isValid, errors } = allFieldsValidation(newAddress, rules, {\n        'required.address': 'Address is required.',\n        'required.city': 'City is required.',\n        'required.state': 'State is required.',\n        'required.country': 'Country is required.',\n        'required.zipCode': 'Zipcode is required.'\n      });\n\n      if (!isValid) {\n        return dispatch({\n          type: SET_ADDRESS_FORM_EDIT_ERRORS,\n          payload: errors\n        });\n      }\n\n      const response = await axios.put(\n        `${API_URL}/address/${newAddress._id}`,\n        newAddress\n      );\n\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n\n      if (response.data.success === true) {\n        dispatch(success(successfulOptions));\n        dispatch(goBack());\n      }\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n\n// delete address api\nexport const deleteAddress = id => {\n  return async (dispatch, getState) => {\n    try {\n      const response = await axios.delete(`${API_URL}/address/delete/${id}`);\n\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n\n      if (response.data.success === true) {\n        dispatch(success(successfulOptions));\n        dispatch({\n          type: REMOVE_ADDRESS,\n          payload: id\n        });\n        dispatch(goBack());\n      }\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}