{"ast":null,"code":"/*\n *\n * Contact actions\n *\n */\n\nimport { success } from 'react-notification-system-redux';\nimport axios from 'axios';\nimport { CONTACT_FORM_CHANGE, SET_CONTACT_FORM_ERRORS, CONTACT_FORM_RESET } from './constants';\nimport handleError from '../../utils/error';\nimport { allFieldsValidation } from '../../utils/validation';\nimport { API_URL } from '../../constants';\nexport const contactFormChange = (name, value) => {\n  let formData = {};\n  formData[name] = value;\n  return {\n    type: CONTACT_FORM_CHANGE,\n    payload: formData\n  };\n};\nexport const contactUs = () => {\n  return async (dispatch, getState) => {\n    try {\n      const rules = {\n        name: 'required',\n        email: 'required|email',\n        message: 'required|min:10'\n      };\n      const contact = getState().contact.contactFormData;\n      const {\n        isValid,\n        errors\n      } = allFieldsValidation(contact, rules, {\n        'required.name': 'Name is required.',\n        'required.email': 'Email is required.',\n        'email.email': 'Email format is invalid.',\n        'required.message': 'Message is required.',\n        'min.message': 'Message must be at least 10 characters.'\n      });\n      if (!isValid) {\n        return dispatch({\n          type: SET_CONTACT_FORM_ERRORS,\n          payload: errors\n        });\n      }\n      const response = await axios.post(`${API_URL}/contact/add`, contact);\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n      dispatch({\n        type: CONTACT_FORM_RESET\n      });\n      dispatch(success(successfulOptions));\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};","map":{"version":3,"names":["success","axios","CONTACT_FORM_CHANGE","SET_CONTACT_FORM_ERRORS","CONTACT_FORM_RESET","handleError","allFieldsValidation","API_URL","contactFormChange","name","value","formData","type","payload","contactUs","dispatch","getState","rules","email","message","contact","contactFormData","isValid","errors","response","post","successfulOptions","title","data","position","autoDismiss","error"],"sources":["D:/origin tribe/mern-ecommerce-master/client/src/containers/Contact/actions.js"],"sourcesContent":["/*\n *\n * Contact actions\n *\n */\n\nimport { success } from 'react-notification-system-redux';\nimport axios from 'axios';\n\nimport {\n  CONTACT_FORM_CHANGE,\n  SET_CONTACT_FORM_ERRORS,\n  CONTACT_FORM_RESET\n} from './constants';\nimport handleError from '../../utils/error';\nimport { allFieldsValidation } from '../../utils/validation';\nimport { API_URL } from '../../constants';\n\nexport const contactFormChange = (name, value) => {\n  let formData = {};\n  formData[name] = value;\n\n  return {\n    type: CONTACT_FORM_CHANGE,\n    payload: formData\n  };\n};\n\nexport const contactUs = () => {\n  return async (dispatch, getState) => {\n    try {\n      const rules = {\n        name: 'required',\n        email: 'required|email',\n        message: 'required|min:10'\n      };\n\n      const contact = getState().contact.contactFormData;\n\n      const { isValid, errors } = allFieldsValidation(contact, rules, {\n        'required.name': 'Name is required.',\n        'required.email': 'Email is required.',\n        'email.email': 'Email format is invalid.',\n        'required.message': 'Message is required.',\n        'min.message': 'Message must be at least 10 characters.'\n      });\n\n      if (!isValid) {\n        return dispatch({ type: SET_CONTACT_FORM_ERRORS, payload: errors });\n      }\n\n      const response = await axios.post(`${API_URL}/contact/add`, contact);\n\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n\n      dispatch({ type: CONTACT_FORM_RESET });\n      dispatch(success(successfulOptions));\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,SAASA,OAAO,QAAQ,iCAAiC;AACzD,OAAOC,KAAK,MAAM,OAAO;AAEzB,SACEC,mBAAmB,EACnBC,uBAAuB,EACvBC,kBAAkB,QACb,aAAa;AACpB,OAAOC,WAAW,MAAM,mBAAmB;AAC3C,SAASC,mBAAmB,QAAQ,wBAAwB;AAC5D,SAASC,OAAO,QAAQ,iBAAiB;AAEzC,OAAO,MAAMC,iBAAiB,GAAGA,CAACC,IAAI,EAAEC,KAAK,KAAK;EAChD,IAAIC,QAAQ,GAAG,CAAC,CAAC;EACjBA,QAAQ,CAACF,IAAI,CAAC,GAAGC,KAAK;EAEtB,OAAO;IACLE,IAAI,EAAEV,mBAAmB;IACzBW,OAAO,EAAEF;EACX,CAAC;AACH,CAAC;AAED,OAAO,MAAMG,SAAS,GAAGA,CAAA,KAAM;EAC7B,OAAO,OAAOC,QAAQ,EAAEC,QAAQ,KAAK;IACnC,IAAI;MACF,MAAMC,KAAK,GAAG;QACZR,IAAI,EAAE,UAAU;QAChBS,KAAK,EAAE,gBAAgB;QACvBC,OAAO,EAAE;MACX,CAAC;MAED,MAAMC,OAAO,GAAGJ,QAAQ,CAAC,CAAC,CAACI,OAAO,CAACC,eAAe;MAElD,MAAM;QAAEC,OAAO;QAAEC;MAAO,CAAC,GAAGjB,mBAAmB,CAACc,OAAO,EAAEH,KAAK,EAAE;QAC9D,eAAe,EAAE,mBAAmB;QACpC,gBAAgB,EAAE,oBAAoB;QACtC,aAAa,EAAE,0BAA0B;QACzC,kBAAkB,EAAE,sBAAsB;QAC1C,aAAa,EAAE;MACjB,CAAC,CAAC;MAEF,IAAI,CAACK,OAAO,EAAE;QACZ,OAAOP,QAAQ,CAAC;UAAEH,IAAI,EAAET,uBAAuB;UAAEU,OAAO,EAAEU;QAAO,CAAC,CAAC;MACrE;MAEA,MAAMC,QAAQ,GAAG,MAAMvB,KAAK,CAACwB,IAAI,CAAE,GAAElB,OAAQ,cAAa,EAAEa,OAAO,CAAC;MAEpE,MAAMM,iBAAiB,GAAG;QACxBC,KAAK,EAAG,GAAEH,QAAQ,CAACI,IAAI,CAACT,OAAQ,EAAC;QACjCU,QAAQ,EAAE,IAAI;QACdC,WAAW,EAAE;MACf,CAAC;MAEDf,QAAQ,CAAC;QAAEH,IAAI,EAAER;MAAmB,CAAC,CAAC;MACtCW,QAAQ,CAACf,OAAO,CAAC0B,iBAAiB,CAAC,CAAC;IACtC,CAAC,CAAC,OAAOK,KAAK,EAAE;MACd1B,WAAW,CAAC0B,KAAK,EAAEhB,QAAQ,CAAC;IAC9B;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}