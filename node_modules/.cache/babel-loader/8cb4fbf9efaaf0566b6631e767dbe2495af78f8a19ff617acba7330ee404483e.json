{"ast":null,"code":"/*\n *\n * ResetPassword actions\n *\n */\n\nimport { push } from 'connected-react-router';\nimport { success } from 'react-notification-system-redux';\nimport axios from 'axios';\nimport { RESET_PASSWORD_CHANGE, RESET_PASSWORD_RESET, SET_RESET_PASSWORD_FORM_ERRORS } from './constants';\nimport { signOut } from '../Login/actions';\nimport handleError from '../../utils/error';\nimport { allFieldsValidation } from '../../utils/validation';\nimport { API_URL } from '../../constants';\nexport const resetPasswordChange = (name, value) => {\n  let formData = {};\n  formData[name] = value;\n  return {\n    type: RESET_PASSWORD_CHANGE,\n    payload: formData\n  };\n};\nexport const resetPassword = token => {\n  return async (dispatch, getState) => {\n    try {\n      const rules = {\n        password: 'required|min:6',\n        confirmPassword: 'required|min:6|same:password'\n      };\n      const user = getState().resetPassword.resetFormData;\n      const {\n        isValid,\n        errors\n      } = allFieldsValidation(user, rules, {\n        'required.password': 'Password is required.',\n        'min.password': 'Password must be at least 6 characters.',\n        'required.confirmPassword': 'Confirm password is required.',\n        'min.confirmPassword': 'Confirm password must be at least 6 characters.',\n        'same.confirmPassword': 'Confirm password and password fields must match.'\n      });\n      if (!isValid) {\n        return dispatch({\n          type: SET_RESET_PASSWORD_FORM_ERRORS,\n          payload: errors\n        });\n      }\n      const response = await axios.post(`${API_URL}/auth/reset/${token}`, user);\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n      if (response.data.success == true) {\n        dispatch(push('/login'));\n      }\n      dispatch(success(successfulOptions));\n      dispatch({\n        type: RESET_PASSWORD_RESET\n      });\n    } catch (error) {\n      const title = `Please try to reset again!`;\n      handleError(error, dispatch, title);\n    }\n  };\n};\nexport const resetAccountPassword = () => {\n  return async (dispatch, getState) => {\n    try {\n      const rules = {\n        password: 'required|min:6',\n        confirmPassword: 'required|min:6'\n      };\n      const user = getState().resetPassword.resetFormData;\n      const {\n        isValid,\n        errors\n      } = allFieldsValidation(user, rules, {\n        'required.password': 'Password is required.',\n        'min.password': 'Password must be at least 6 characters.',\n        'required.confirmPassword': 'Confirm password is required.',\n        'min.confirmPassword': 'Confirm password must be at least 6 characters.'\n      });\n      if (!isValid) {\n        return dispatch({\n          type: SET_RESET_PASSWORD_FORM_ERRORS,\n          payload: errors\n        });\n      }\n      const response = await axios.post(`${API_URL}/auth/reset`, user);\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n      if (response.data.success === true) {\n        dispatch(signOut());\n      }\n      dispatch(success(successfulOptions));\n      dispatch({\n        type: RESET_PASSWORD_RESET\n      });\n    } catch (error) {\n      const title = `Please try to reset again!`;\n      handleError(error, dispatch, title);\n    }\n  };\n};","map":{"version":3,"names":["push","success","axios","RESET_PASSWORD_CHANGE","RESET_PASSWORD_RESET","SET_RESET_PASSWORD_FORM_ERRORS","signOut","handleError","allFieldsValidation","API_URL","resetPasswordChange","name","value","formData","type","payload","resetPassword","token","dispatch","getState","rules","password","confirmPassword","user","resetFormData","isValid","errors","response","post","successfulOptions","title","data","message","position","autoDismiss","error","resetAccountPassword"],"sources":["D:/origin tribe/mern-ecommerce-master/client/src/containers/ResetPassword/actions.js"],"sourcesContent":["/*\n *\n * ResetPassword actions\n *\n */\n\nimport { push } from 'connected-react-router';\nimport { success } from 'react-notification-system-redux';\nimport axios from 'axios';\n\nimport {\n  RESET_PASSWORD_CHANGE,\n  RESET_PASSWORD_RESET,\n  SET_RESET_PASSWORD_FORM_ERRORS\n} from './constants';\n\nimport { signOut } from '../Login/actions';\nimport handleError from '../../utils/error';\nimport { allFieldsValidation } from '../../utils/validation';\nimport { API_URL } from '../../constants';\n\nexport const resetPasswordChange = (name, value) => {\n  let formData = {};\n  formData[name] = value;\n\n  return {\n    type: RESET_PASSWORD_CHANGE,\n    payload: formData\n  };\n};\n\nexport const resetPassword = token => {\n  return async (dispatch, getState) => {\n    try {\n      const rules = {\n        password: 'required|min:6',\n        confirmPassword: 'required|min:6|same:password'\n      };\n      const user = getState().resetPassword.resetFormData;\n\n      const { isValid, errors } = allFieldsValidation(user, rules, {\n        'required.password': 'Password is required.',\n        'min.password': 'Password must be at least 6 characters.',\n        'required.confirmPassword': 'Confirm password is required.',\n        'min.confirmPassword':\n          'Confirm password must be at least 6 characters.',\n        'same.confirmPassword':\n          'Confirm password and password fields must match.'\n      });\n\n      if (!isValid) {\n        return dispatch({\n          type: SET_RESET_PASSWORD_FORM_ERRORS,\n          payload: errors\n        });\n      }\n\n      const response = await axios.post(`${API_URL}/auth/reset/${token}`, user);\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n\n      if (response.data.success == true) {\n        dispatch(push('/login'));\n      }\n\n      dispatch(success(successfulOptions));\n      dispatch({ type: RESET_PASSWORD_RESET });\n    } catch (error) {\n      const title = `Please try to reset again!`;\n      handleError(error, dispatch, title);\n    }\n  };\n};\n\nexport const resetAccountPassword = () => {\n  return async (dispatch, getState) => {\n    try {\n      const rules = {\n        password: 'required|min:6',\n        confirmPassword: 'required|min:6'\n      };\n\n      const user = getState().resetPassword.resetFormData;\n\n      const { isValid, errors } = allFieldsValidation(user, rules, {\n        'required.password': 'Password is required.',\n        'min.password': 'Password must be at least 6 characters.',\n        'required.confirmPassword': 'Confirm password is required.',\n        'min.confirmPassword': 'Confirm password must be at least 6 characters.'\n      });\n\n      if (!isValid) {\n        return dispatch({\n          type: SET_RESET_PASSWORD_FORM_ERRORS,\n          payload: errors\n        });\n      }\n\n      const response = await axios.post(`${API_URL}/auth/reset`, user);\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n\n      if (response.data.success === true) {\n        dispatch(signOut());\n      }\n\n      dispatch(success(successfulOptions));\n      dispatch({ type: RESET_PASSWORD_RESET });\n    } catch (error) {\n      const title = `Please try to reset again!`;\n      handleError(error, dispatch, title);\n    }\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}