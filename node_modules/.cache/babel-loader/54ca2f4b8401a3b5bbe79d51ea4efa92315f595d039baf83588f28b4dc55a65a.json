{"ast":null,"code":"/*\n *\n * Product actions\n *\n */\n\nimport { goBack } from 'connected-react-router';\nimport { success } from 'react-notification-system-redux';\nimport axios from 'axios';\nimport { FETCH_PRODUCTS, FETCH_STORE_PRODUCTS, FETCH_PRODUCT, FETCH_STORE_PRODUCT, PRODUCT_CHANGE, PRODUCT_EDIT_CHANGE, PRODUCT_SHOP_CHANGE, SET_PRODUCT_FORM_ERRORS, SET_PRODUCT_FORM_EDIT_ERRORS, RESET_PRODUCT, ADD_PRODUCT, REMOVE_PRODUCT, FETCH_PRODUCTS_SELECT, SET_PRODUCTS_LOADING, SET_ADVANCED_FILTERS, RESET_ADVANCED_FILTERS } from './constants';\nimport { API_URL, ROLES } from '../../constants';\nimport handleError from '../../utils/error';\nimport { formatSelectOptions, unformatSelectOptions } from '../../utils/select';\nimport { allFieldsValidation } from '../../utils/validation';\nexport const productChange = (name, value) => {\n  let formData = {};\n  formData[name] = value;\n  return {\n    type: PRODUCT_CHANGE,\n    payload: formData\n  };\n};\nexport const productEditChange = (name, value) => {\n  let formData = {};\n  formData[name] = value;\n  return {\n    type: PRODUCT_EDIT_CHANGE,\n    payload: formData\n  };\n};\nexport const productShopChange = (name, value) => {\n  let formData = {};\n  formData[name] = value;\n  return {\n    type: PRODUCT_SHOP_CHANGE,\n    payload: formData\n  };\n};\nexport const resetProduct = () => {\n  return async (dispatch, getState) => {\n    dispatch({\n      type: RESET_PRODUCT\n    });\n  };\n};\nexport const setProductLoading = value => {\n  return {\n    type: SET_PRODUCTS_LOADING,\n    payload: value\n  };\n};\nexport const filterProducts2 = (n, v) => {\n  return async (dispatch, getState) => {\n    const advancedFilters = getState().product.advancedFilters;\n    const payload = productsFilterOrganizer(n, v, advancedFilters);\n    dispatch({\n      type: SET_ADVANCED_FILTERS,\n      payload\n    });\n  };\n};\n\n// fetch/filter store products api\nexport const filterProducts = (n, v) => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch(setProductLoading(true));\n      const advancedFilters = getState().product.advancedFilters;\n      const payload = productsFilterOrganizer(n, v, advancedFilters);\n      dispatch({\n        type: SET_ADVANCED_FILTERS,\n        payload\n      });\n      const sortOrder = getSortOrder(payload.order);\n      const response = await axios.get(`${API_URL}/product/list`, {\n        params: {\n          ...payload,\n          sortOrder\n        }\n      });\n      const {\n        products,\n        totalPages,\n        currentPage,\n        count\n      } = response.data;\n      dispatch({\n        type: FETCH_STORE_PRODUCTS,\n        payload: products\n      });\n      const newPayload = {\n        ...payload,\n        totalPages,\n        currentPage,\n        count\n      };\n      dispatch({\n        type: SET_ADVANCED_FILTERS,\n        payload: newPayload\n      });\n    } catch (error) {\n      handleError(error, dispatch);\n    } finally {\n      dispatch(setProductLoading(false));\n    }\n  };\n};\n\n// fetch store product api\nexport const fetchStoreProduct = slug => {\n  return async (dispatch, getState) => {\n    dispatch(setProductLoading(true));\n    try {\n      const response = await axios.get(`${API_URL}/product/item/${slug}`);\n      const inventory = response.data.product.quantity;\n      const product = {\n        ...response.data.product,\n        inventory\n      };\n      dispatch({\n        type: FETCH_STORE_PRODUCT,\n        payload: product\n      });\n    } catch (error) {\n      handleError(error, dispatch);\n    } finally {\n      dispatch(setProductLoading(false));\n    }\n  };\n};\nexport const fetchProductsSelect = () => {\n  return async (dispatch, getState) => {\n    try {\n      const response = await axios.get(`${API_URL}/product/list/select`);\n      const formattedProducts = formatSelectOptions(response.data.products);\n      dispatch({\n        type: FETCH_PRODUCTS_SELECT,\n        payload: formattedProducts\n      });\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n\n// fetch products api\nexport const fetchProducts = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch(setProductLoading(true));\n      const response = await axios.get(`${API_URL}/product`);\n      dispatch({\n        type: FETCH_PRODUCTS,\n        payload: response.data.products\n      });\n    } catch (error) {\n      handleError(error, dispatch);\n    } finally {\n      dispatch(setProductLoading(false));\n    }\n  };\n};\n\n// fetch product api\nexport const fetchProduct = id => {\n  return async (dispatch, getState) => {\n    try {\n      const response = await axios.get(`${API_URL}/product/${id}`);\n      const inventory = response.data.product.quantity;\n      const brand = response.data.product.brand;\n      const isBrand = brand ? true : false;\n      const brandData = formatSelectOptions(isBrand && [brand], !isBrand, 'fetchProduct');\n      response.data.product.brand = brandData[0];\n      const product = {\n        ...response.data.product,\n        inventory\n      };\n      dispatch({\n        type: FETCH_PRODUCT,\n        payload: product\n      });\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n\n// add product api\nexport const addProduct = () => {\n  return async (dispatch, getState) => {\n    try {\n      const rules = {\n        sku: 'required|alpha_dash',\n        name: 'required',\n        description: 'required|max:200',\n        quantity: 'required|numeric',\n        price: 'required|numeric',\n        taxable: 'required',\n        image: 'required',\n        brand: 'required'\n      };\n      const product = getState().product.productFormData;\n      const user = getState().account.user;\n      const brands = getState().brand.brandsSelect;\n      const brand = unformatSelectOptions([product.brand]);\n      const newProduct = {\n        sku: product.sku,\n        name: product.name,\n        description: product.description,\n        price: product.price,\n        quantity: product.quantity,\n        image: product.image,\n        isActive: product.isActive,\n        taxable: product.taxable.value,\n        brand: user.role !== ROLES.Merchant ? brand !== 0 ? brand : null : brands[1].value\n      };\n      const {\n        isValid,\n        errors\n      } = allFieldsValidation(newProduct, rules, {\n        'required.sku': 'Sku is required.',\n        'alpha_dash.sku': 'Sku may have alpha-numeric characters, as well as dashes and underscores only.',\n        'required.name': 'Name is required.',\n        'required.description': 'Description is required.',\n        'max.description': 'Description may not be greater than 200 characters.',\n        'required.quantity': 'Quantity is required.',\n        'required.price': 'Price is required.',\n        'required.taxable': 'Taxable is required.',\n        'required.image': 'Please upload files with jpg, jpeg, png format.',\n        'required.brand': 'Brand is required.'\n      });\n      if (!isValid) {\n        return dispatch({\n          type: SET_PRODUCT_FORM_ERRORS,\n          payload: errors\n        });\n      }\n      const formData = new FormData();\n      if (newProduct.image) {\n        for (const key in newProduct) {\n          if (newProduct.hasOwnProperty(key)) {\n            if (key === 'brand' && newProduct[key] === null) {\n              continue;\n            } else {\n              formData.set(key, newProduct[key]);\n            }\n          }\n        }\n      }\n      const response = await axios.post(`${API_URL}/product/add`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n      if (response.data.success === true) {\n        dispatch(success(successfulOptions));\n        dispatch({\n          type: ADD_PRODUCT,\n          payload: response.data.product\n        });\n        dispatch(resetProduct());\n        dispatch(goBack());\n      }\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n\n// update Product api\nexport const updateProduct = () => {\n  return async (dispatch, getState) => {\n    try {\n      const rules = {\n        name: 'required',\n        sku: 'required|alpha_dash',\n        slug: 'required|alpha_dash',\n        description: 'required|max:200',\n        quantity: 'required|numeric',\n        price: 'required|numeric',\n        taxable: 'required',\n        brand: 'required'\n      };\n      const product = getState().product.product;\n      const brand = unformatSelectOptions([product.brand]);\n      const newProduct = {\n        name: product.name,\n        sku: product.sku,\n        slug: product.slug,\n        description: product.description,\n        quantity: product.quantity,\n        price: product.price,\n        taxable: product.taxable,\n        brand: brand != 0 ? brand : null\n      };\n      const {\n        isValid,\n        errors\n      } = allFieldsValidation(newProduct, rules, {\n        'required.name': 'Name is required.',\n        'required.sku': 'Sku is required.',\n        'alpha_dash.sku': 'Sku may have alpha-numeric characters, as well as dashes and underscores only.',\n        'required.slug': 'Slug is required.',\n        'alpha_dash.slug': 'Slug may have alpha-numeric characters, as well as dashes and underscores only.',\n        'required.description': 'Description is required.',\n        'max.description': 'Description may not be greater than 200 characters.',\n        'required.quantity': 'Quantity is required.',\n        'required.price': 'Price is required.',\n        'required.taxable': 'Taxable is required.',\n        'required.brand': 'Brand is required.'\n      });\n      if (!isValid) {\n        return dispatch({\n          type: SET_PRODUCT_FORM_EDIT_ERRORS,\n          payload: errors\n        });\n      }\n      const response = await axios.put(`${API_URL}/product/${product._id}`, {\n        product: newProduct\n      });\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n      if (response.data.success === true) {\n        dispatch(success(successfulOptions));\n\n        //dispatch(goBack());\n      }\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n\n// activate product api\nexport const activateProduct = (id, value) => {\n  return async (dispatch, getState) => {\n    try {\n      const response = await axios.put(`${API_URL}/product/${id}/active`, {\n        product: {\n          isActive: value\n        }\n      });\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n      if (response.data.success === true) {\n        dispatch(success(successfulOptions));\n      }\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n\n// delete product api\nexport const deleteProduct = id => {\n  return async (dispatch, getState) => {\n    try {\n      const response = await axios.delete(`${API_URL}/product/delete/${id}`);\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n      if (response.data.success === true) {\n        dispatch(success(successfulOptions));\n        dispatch({\n          type: REMOVE_PRODUCT,\n          payload: id\n        });\n        dispatch(goBack());\n      }\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\nconst productsFilterOrganizer = (n, v, s) => {\n  switch (n) {\n    case 'category':\n      return {\n        name: s.name,\n        category: v,\n        brand: 'all',\n        min: s.min,\n        max: s.max,\n        rating: s.rating,\n        order: s.order,\n        page: s.currentPage,\n        limit: s.limit\n      };\n    case 'brand':\n      return {\n        name: s.name,\n        category: 'all',\n        brand: v,\n        min: s.min,\n        max: s.max,\n        rating: s.rating,\n        order: s.order,\n        page: s.currentPage,\n        limit: s.limit\n      };\n    case 'sorting':\n      return {\n        name: s.name,\n        category: s.category,\n        brand: s.brand,\n        min: s.min,\n        max: s.max,\n        rating: s.rating,\n        order: v,\n        page: s.currentPage,\n        limit: s.limit\n      };\n    case 'price':\n      return {\n        name: s.name,\n        category: s.category,\n        brand: s.brand,\n        min: v[0],\n        max: v[1],\n        rating: s.rating,\n        order: s.order,\n        page: s.currentPage,\n        limit: s.limit\n      };\n    case 'rating':\n      return {\n        name: s.name,\n        category: s.category,\n        brand: s.brand,\n        min: s.min,\n        max: s.max,\n        rating: v,\n        order: s.order,\n        page: s.currentPage,\n        limit: s.limit\n      };\n    case 'pagination':\n      return {\n        name: s.name,\n        category: s.category,\n        brand: s.brand,\n        min: s.min,\n        max: s.max,\n        rating: s.rating,\n        order: s.order,\n        page: v !== null && v !== void 0 ? v : s.currentPage,\n        limit: s.limit\n      };\n    default:\n      return {\n        name: s.name,\n        category: 'all',\n        brand: 'all',\n        min: s.min,\n        max: s.max,\n        rating: s.rating,\n        order: s.order,\n        page: s.currentPage,\n        limit: s.limit\n      };\n  }\n};\nconst getSortOrder = value => {\n  let sortOrder = {};\n  switch (value) {\n    case 0:\n      sortOrder._id = -1;\n      break;\n    case 1:\n      sortOrder.price = -1;\n      break;\n    case 2:\n      sortOrder.price = 1;\n      break;\n    default:\n      break;\n  }\n  return sortOrder;\n};","map":{"version":3,"names":["goBack","success","axios","FETCH_PRODUCTS","FETCH_STORE_PRODUCTS","FETCH_PRODUCT","FETCH_STORE_PRODUCT","PRODUCT_CHANGE","PRODUCT_EDIT_CHANGE","PRODUCT_SHOP_CHANGE","SET_PRODUCT_FORM_ERRORS","SET_PRODUCT_FORM_EDIT_ERRORS","RESET_PRODUCT","ADD_PRODUCT","REMOVE_PRODUCT","FETCH_PRODUCTS_SELECT","SET_PRODUCTS_LOADING","SET_ADVANCED_FILTERS","RESET_ADVANCED_FILTERS","API_URL","ROLES","handleError","formatSelectOptions","unformatSelectOptions","allFieldsValidation","productChange","name","value","formData","type","payload","productEditChange","productShopChange","resetProduct","dispatch","getState","setProductLoading","filterProducts2","n","v","advancedFilters","product","productsFilterOrganizer","filterProducts","sortOrder","getSortOrder","order","response","get","params","products","totalPages","currentPage","count","data","newPayload","error","fetchStoreProduct","slug","inventory","quantity","fetchProductsSelect","formattedProducts","fetchProducts","fetchProduct","id","brand","isBrand","brandData","addProduct","rules","sku","description","price","taxable","image","productFormData","user","account","brands","brandsSelect","newProduct","isActive","role","Merchant","isValid","errors","FormData","key","hasOwnProperty","set","post","headers","successfulOptions","title","message","position","autoDismiss","updateProduct","put","_id","activateProduct","deleteProduct","delete","s","category","min","max","rating","page","limit"],"sources":["D:/origin tribe/mern-ecommerce-master/client/src/containers/Product/actions.js"],"sourcesContent":["/*\n *\n * Product actions\n *\n */\n\nimport { goBack } from 'connected-react-router';\nimport { success } from 'react-notification-system-redux';\nimport axios from 'axios';\n\nimport {\n  FETCH_PRODUCTS,\n  FETCH_STORE_PRODUCTS,\n  FETCH_PRODUCT,\n  FETCH_STORE_PRODUCT,\n  PRODUCT_CHANGE,\n  PRODUCT_EDIT_CHANGE,\n  PRODUCT_SHOP_CHANGE,\n  SET_PRODUCT_FORM_ERRORS,\n  SET_PRODUCT_FORM_EDIT_ERRORS,\n  RESET_PRODUCT,\n  ADD_PRODUCT,\n  REMOVE_PRODUCT,\n  FETCH_PRODUCTS_SELECT,\n  SET_PRODUCTS_LOADING,\n  SET_ADVANCED_FILTERS,\n  RESET_ADVANCED_FILTERS\n} from './constants';\n\nimport { API_URL, ROLES } from '../../constants';\nimport handleError from '../../utils/error';\nimport { formatSelectOptions, unformatSelectOptions } from '../../utils/select';\nimport { allFieldsValidation } from '../../utils/validation';\n\nexport const productChange = (name, value) => {\n  let formData = {};\n  formData[name] = value;\n  return {\n    type: PRODUCT_CHANGE,\n    payload: formData\n  };\n};\n\nexport const productEditChange = (name, value) => {\n  let formData = {};\n  formData[name] = value;\n\n  return {\n    type: PRODUCT_EDIT_CHANGE,\n    payload: formData\n  };\n};\n\nexport const productShopChange = (name, value) => {\n  let formData = {};\n  formData[name] = value;\n\n  return {\n    type: PRODUCT_SHOP_CHANGE,\n    payload: formData\n  };\n};\n\nexport const resetProduct = () => {\n  return async (dispatch, getState) => {\n    dispatch({ type: RESET_PRODUCT });\n  };\n};\n\nexport const setProductLoading = value => {\n  return {\n    type: SET_PRODUCTS_LOADING,\n    payload: value\n  };\n};\n\nexport const filterProducts2 = (n, v) => {\n  return async (dispatch, getState) => {\n    const advancedFilters = getState().product.advancedFilters;\n    const payload = productsFilterOrganizer(n, v, advancedFilters);\n\n    dispatch({ type: SET_ADVANCED_FILTERS, payload });\n  };\n};\n\n// fetch/filter store products api\nexport const filterProducts = (n, v) => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch(setProductLoading(true));\n      const advancedFilters = getState().product.advancedFilters;\n      const payload = productsFilterOrganizer(n, v, advancedFilters);\n\n      dispatch({ type: SET_ADVANCED_FILTERS, payload });\n      const sortOrder = getSortOrder(payload.order);\n      const response = await axios.get(`${API_URL}/product/list`, {\n        params: { ...payload, sortOrder }\n      });\n      const { products, totalPages, currentPage, count } = response.data;\n\n      dispatch({\n        type: FETCH_STORE_PRODUCTS,\n        payload: products\n      });\n\n      const newPayload = {\n        ...payload,\n        totalPages,\n        currentPage,\n        count\n      };\n      dispatch({\n        type: SET_ADVANCED_FILTERS,\n        payload: newPayload\n      });\n    } catch (error) {\n      handleError(error, dispatch);\n    } finally {\n      dispatch(setProductLoading(false));\n    }\n  };\n};\n\n// fetch store product api\nexport const fetchStoreProduct = slug => {\n  return async (dispatch, getState) => {\n    dispatch(setProductLoading(true));\n\n    try {\n      const response = await axios.get(`${API_URL}/product/item/${slug}`);\n\n      const inventory = response.data.product.quantity;\n      const product = { ...response.data.product, inventory };\n\n      dispatch({\n        type: FETCH_STORE_PRODUCT,\n        payload: product\n      });\n    } catch (error) {\n      handleError(error, dispatch);\n    } finally {\n      dispatch(setProductLoading(false));\n    }\n  };\n};\n\nexport const fetchProductsSelect = () => {\n  return async (dispatch, getState) => {\n    try {\n      const response = await axios.get(`${API_URL}/product/list/select`);\n\n      const formattedProducts = formatSelectOptions(response.data.products);\n\n      dispatch({\n        type: FETCH_PRODUCTS_SELECT,\n        payload: formattedProducts\n      });\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n\n// fetch products api\nexport const fetchProducts = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch(setProductLoading(true));\n\n      const response = await axios.get(`${API_URL}/product`);\n\n      dispatch({\n        type: FETCH_PRODUCTS,\n        payload: response.data.products\n      });\n    } catch (error) {\n      handleError(error, dispatch);\n    } finally {\n      dispatch(setProductLoading(false));\n    }\n  };\n};\n\n// fetch product api\nexport const fetchProduct = id => {\n  return async (dispatch, getState) => {\n    try {\n      const response = await axios.get(`${API_URL}/product/${id}`);\n\n      const inventory = response.data.product.quantity;\n\n      const brand = response.data.product.brand;\n      const isBrand = brand ? true : false;\n      const brandData = formatSelectOptions(\n        isBrand && [brand],\n        !isBrand,\n        'fetchProduct'\n      );\n\n      response.data.product.brand = brandData[0];\n\n      const product = { ...response.data.product, inventory };\n\n      dispatch({\n        type: FETCH_PRODUCT,\n        payload: product\n      });\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n\n// add product api\nexport const addProduct = () => {\n  return async (dispatch, getState) => {\n    try {\n      const rules = {\n        sku: 'required|alpha_dash',\n        name: 'required',\n        description: 'required|max:200',\n        quantity: 'required|numeric',\n        price: 'required|numeric',\n        taxable: 'required',\n        image: 'required',\n        brand: 'required'\n      };\n\n      const product = getState().product.productFormData;\n      const user = getState().account.user;\n      const brands = getState().brand.brandsSelect;\n\n      const brand = unformatSelectOptions([product.brand]);\n\n      const newProduct = {\n        sku: product.sku,\n        name: product.name,\n        description: product.description,\n        price: product.price,\n        quantity: product.quantity,\n        image: product.image,\n        isActive: product.isActive,\n        taxable: product.taxable.value,\n        brand:\n          user.role !== ROLES.Merchant\n            ? brand !== 0\n              ? brand\n              : null\n            : brands[1].value\n      };\n\n      const { isValid, errors } = allFieldsValidation(newProduct, rules, {\n        'required.sku': 'Sku is required.',\n        'alpha_dash.sku':\n          'Sku may have alpha-numeric characters, as well as dashes and underscores only.',\n        'required.name': 'Name is required.',\n        'required.description': 'Description is required.',\n        'max.description':\n          'Description may not be greater than 200 characters.',\n        'required.quantity': 'Quantity is required.',\n        'required.price': 'Price is required.',\n        'required.taxable': 'Taxable is required.',\n        'required.image': 'Please upload files with jpg, jpeg, png format.',\n        'required.brand': 'Brand is required.'\n      });\n\n      if (!isValid) {\n        return dispatch({ type: SET_PRODUCT_FORM_ERRORS, payload: errors });\n      }\n      const formData = new FormData();\n      if (newProduct.image) {\n        for (const key in newProduct) {\n          if (newProduct.hasOwnProperty(key)) {\n            if (key === 'brand' && newProduct[key] === null) {\n              continue;\n            } else {\n              formData.set(key, newProduct[key]);\n            }\n          }\n        }\n      }\n\n      const response = await axios.post(`${API_URL}/product/add`, formData, {\n        headers: { 'Content-Type': 'multipart/form-data' }\n      });\n\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n\n      if (response.data.success === true) {\n        dispatch(success(successfulOptions));\n        dispatch({\n          type: ADD_PRODUCT,\n          payload: response.data.product\n        });\n        dispatch(resetProduct());\n        dispatch(goBack());\n      }\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n\n// update Product api\nexport const updateProduct = () => {\n  return async (dispatch, getState) => {\n    try {\n      const rules = {\n        name: 'required',\n        sku: 'required|alpha_dash',\n        slug: 'required|alpha_dash',\n        description: 'required|max:200',\n        quantity: 'required|numeric',\n        price: 'required|numeric',\n        taxable: 'required',\n        brand: 'required'\n      };\n\n      const product = getState().product.product;\n\n      const brand = unformatSelectOptions([product.brand]);\n\n      const newProduct = {\n        name: product.name,\n        sku: product.sku,\n        slug: product.slug,\n        description: product.description,\n        quantity: product.quantity,\n        price: product.price,\n        taxable: product.taxable,\n        brand: brand != 0 ? brand : null\n      };\n\n      const { isValid, errors } = allFieldsValidation(newProduct, rules, {\n        'required.name': 'Name is required.',\n        'required.sku': 'Sku is required.',\n        'alpha_dash.sku':\n          'Sku may have alpha-numeric characters, as well as dashes and underscores only.',\n        'required.slug': 'Slug is required.',\n        'alpha_dash.slug':\n          'Slug may have alpha-numeric characters, as well as dashes and underscores only.',\n        'required.description': 'Description is required.',\n        'max.description':\n          'Description may not be greater than 200 characters.',\n        'required.quantity': 'Quantity is required.',\n        'required.price': 'Price is required.',\n        'required.taxable': 'Taxable is required.',\n        'required.brand': 'Brand is required.'\n      });\n\n      if (!isValid) {\n        return dispatch({\n          type: SET_PRODUCT_FORM_EDIT_ERRORS,\n          payload: errors\n        });\n      }\n\n      const response = await axios.put(`${API_URL}/product/${product._id}`, {\n        product: newProduct\n      });\n\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n\n      if (response.data.success === true) {\n        dispatch(success(successfulOptions));\n\n        //dispatch(goBack());\n      }\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n\n// activate product api\nexport const activateProduct = (id, value) => {\n  return async (dispatch, getState) => {\n    try {\n      const response = await axios.put(`${API_URL}/product/${id}/active`, {\n        product: {\n          isActive: value\n        }\n      });\n\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n\n      if (response.data.success === true) {\n        dispatch(success(successfulOptions));\n      }\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n\n// delete product api\nexport const deleteProduct = id => {\n  return async (dispatch, getState) => {\n    try {\n      const response = await axios.delete(`${API_URL}/product/delete/${id}`);\n\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n\n      if (response.data.success === true) {\n        dispatch(success(successfulOptions));\n        dispatch({\n          type: REMOVE_PRODUCT,\n          payload: id\n        });\n        dispatch(goBack());\n      }\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n\nconst productsFilterOrganizer = (n, v, s) => {\n  switch (n) {\n    case 'category':\n      return {\n        name: s.name,\n        category: v,\n        brand: 'all',\n        min: s.min,\n        max: s.max,\n        rating: s.rating,\n        order: s.order,\n        page: s.currentPage,\n        limit: s.limit\n      };\n    case 'brand':\n      return {\n        name: s.name,\n        category: 'all',\n        brand: v,\n        min: s.min,\n        max: s.max,\n        rating: s.rating,\n        order: s.order,\n        page: s.currentPage,\n        limit: s.limit\n      };\n    case 'sorting':\n      return {\n        name: s.name,\n        category: s.category,\n        brand: s.brand,\n        min: s.min,\n        max: s.max,\n        rating: s.rating,\n        order: v,\n        page: s.currentPage,\n        limit: s.limit\n      };\n    case 'price':\n      return {\n        name: s.name,\n        category: s.category,\n        brand: s.brand,\n        min: v[0],\n        max: v[1],\n        rating: s.rating,\n        order: s.order,\n        page: s.currentPage,\n        limit: s.limit\n      };\n    case 'rating':\n      return {\n        name: s.name,\n        category: s.category,\n        brand: s.brand,\n        min: s.min,\n        max: s.max,\n        rating: v,\n        order: s.order,\n        page: s.currentPage,\n        limit: s.limit\n      };\n    case 'pagination':\n      return {\n        name: s.name,\n        category: s.category,\n        brand: s.brand,\n        min: s.min,\n        max: s.max,\n        rating: s.rating,\n        order: s.order,\n        page: v ?? s.currentPage,\n        limit: s.limit\n      };\n    default:\n      return {\n        name: s.name,\n        category: 'all',\n        brand: 'all',\n        min: s.min,\n        max: s.max,\n        rating: s.rating,\n        order: s.order,\n        page: s.currentPage,\n        limit: s.limit\n      };\n  }\n};\n\nconst getSortOrder = value => {\n  let sortOrder = {};\n  switch (value) {\n    case 0:\n      sortOrder._id = -1;\n      break;\n    case 1:\n      sortOrder.price = -1;\n      break;\n    case 2:\n      sortOrder.price = 1;\n      break;\n\n    default:\n      break;\n  }\n\n  return sortOrder;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}