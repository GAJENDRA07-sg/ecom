{"ast":null,"code":"/*\n *\n * ForgotPassword actions\n *\n */\n\nimport { push } from 'connected-react-router';\nimport { success } from 'react-notification-system-redux';\nimport axios from 'axios';\nimport { FORGOT_PASSWORD_CHANGE, FORGOT_PASSWORD_RESET, SET_FORGOT_PASSWORD_FORM_ERRORS } from './constants';\nimport handleError from '../../utils/error';\nimport { allFieldsValidation } from '../../utils/validation';\nimport { API_URL } from '../../constants';\nexport const forgotPasswordChange = (name, value) => {\n  return {\n    type: FORGOT_PASSWORD_CHANGE,\n    payload: value\n  };\n};\nexport const forgotPassowrd = () => {\n  return async (dispatch, getState) => {\n    try {\n      const rules = {\n        email: 'required|email'\n      };\n      const user = getState().forgotPassword.forgotFormData;\n      const {\n        isValid,\n        errors\n      } = allFieldsValidation(user, rules, {\n        'required.email': 'Email is required.'\n      });\n      if (!isValid) {\n        return dispatch({\n          type: SET_FORGOT_PASSWORD_FORM_ERRORS,\n          payload: errors\n        });\n      }\n      const response = await axios.post(`${API_URL}/auth/forgot`, user);\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n      if (response.data.success === true) {\n        dispatch(push('/login'));\n      }\n      dispatch(success(successfulOptions));\n      dispatch({\n        type: FORGOT_PASSWORD_RESET\n      });\n    } catch (error) {\n      const title = `Please try again!`;\n      handleError(error, dispatch, title);\n    }\n  };\n};","map":{"version":3,"names":["push","success","axios","FORGOT_PASSWORD_CHANGE","FORGOT_PASSWORD_RESET","SET_FORGOT_PASSWORD_FORM_ERRORS","handleError","allFieldsValidation","API_URL","forgotPasswordChange","name","value","type","payload","forgotPassowrd","dispatch","getState","rules","email","user","forgotPassword","forgotFormData","isValid","errors","response","post","successfulOptions","title","data","message","position","autoDismiss","error"],"sources":["D:/origin tribe/mern-ecommerce-master/client/src/containers/ForgotPassword/actions.js"],"sourcesContent":["/*\n *\n * ForgotPassword actions\n *\n */\n\nimport { push } from 'connected-react-router';\nimport { success } from 'react-notification-system-redux';\nimport axios from 'axios';\n\nimport {\n  FORGOT_PASSWORD_CHANGE,\n  FORGOT_PASSWORD_RESET,\n  SET_FORGOT_PASSWORD_FORM_ERRORS\n} from './constants';\nimport handleError from '../../utils/error';\nimport { allFieldsValidation } from '../../utils/validation';\nimport { API_URL } from '../../constants';\n\nexport const forgotPasswordChange = (name, value) => {\n  return {\n    type: FORGOT_PASSWORD_CHANGE,\n    payload: value\n  };\n};\n\nexport const forgotPassowrd = () => {\n  return async (dispatch, getState) => {\n    try {\n      const rules = {\n        email: 'required|email'\n      };\n\n      const user = getState().forgotPassword.forgotFormData;\n\n      const { isValid, errors } = allFieldsValidation(user, rules, {\n        'required.email': 'Email is required.'\n      });\n\n      if (!isValid) {\n        return dispatch({\n          type: SET_FORGOT_PASSWORD_FORM_ERRORS,\n          payload: errors\n        });\n      }\n\n      const response = await axios.post(`${API_URL}/auth/forgot`, user);\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n\n      if (response.data.success === true) {\n        dispatch(push('/login'));\n      }\n      dispatch(success(successfulOptions));\n\n      dispatch({ type: FORGOT_PASSWORD_RESET });\n    } catch (error) {\n      const title = `Please try again!`;\n      handleError(error, dispatch, title);\n    }\n  };\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,SAASA,IAAI,QAAQ,wBAAwB;AAC7C,SAASC,OAAO,QAAQ,iCAAiC;AACzD,OAAOC,KAAK,MAAM,OAAO;AAEzB,SACEC,sBAAsB,EACtBC,qBAAqB,EACrBC,+BAA+B,QAC1B,aAAa;AACpB,OAAOC,WAAW,MAAM,mBAAmB;AAC3C,SAASC,mBAAmB,QAAQ,wBAAwB;AAC5D,SAASC,OAAO,QAAQ,iBAAiB;AAEzC,OAAO,MAAMC,oBAAoB,GAAGA,CAACC,IAAI,EAAEC,KAAK,KAAK;EACnD,OAAO;IACLC,IAAI,EAAET,sBAAsB;IAC5BU,OAAO,EAAEF;EACX,CAAC;AACH,CAAC;AAED,OAAO,MAAMG,cAAc,GAAGA,CAAA,KAAM;EAClC,OAAO,OAAOC,QAAQ,EAAEC,QAAQ,KAAK;IACnC,IAAI;MACF,MAAMC,KAAK,GAAG;QACZC,KAAK,EAAE;MACT,CAAC;MAED,MAAMC,IAAI,GAAGH,QAAQ,CAAC,CAAC,CAACI,cAAc,CAACC,cAAc;MAErD,MAAM;QAAEC,OAAO;QAAEC;MAAO,CAAC,GAAGhB,mBAAmB,CAACY,IAAI,EAAEF,KAAK,EAAE;QAC3D,gBAAgB,EAAE;MACpB,CAAC,CAAC;MAEF,IAAI,CAACK,OAAO,EAAE;QACZ,OAAOP,QAAQ,CAAC;UACdH,IAAI,EAAEP,+BAA+B;UACrCQ,OAAO,EAAEU;QACX,CAAC,CAAC;MACJ;MAEA,MAAMC,QAAQ,GAAG,MAAMtB,KAAK,CAACuB,IAAI,CAAE,GAAEjB,OAAQ,cAAa,EAAEW,IAAI,CAAC;MACjE,MAAMO,iBAAiB,GAAG;QACxBC,KAAK,EAAG,GAAEH,QAAQ,CAACI,IAAI,CAACC,OAAQ,EAAC;QACjCC,QAAQ,EAAE,IAAI;QACdC,WAAW,EAAE;MACf,CAAC;MAED,IAAIP,QAAQ,CAACI,IAAI,CAAC3B,OAAO,KAAK,IAAI,EAAE;QAClCc,QAAQ,CAACf,IAAI,CAAC,QAAQ,CAAC,CAAC;MAC1B;MACAe,QAAQ,CAACd,OAAO,CAACyB,iBAAiB,CAAC,CAAC;MAEpCX,QAAQ,CAAC;QAAEH,IAAI,EAAER;MAAsB,CAAC,CAAC;IAC3C,CAAC,CAAC,OAAO4B,KAAK,EAAE;MACd,MAAML,KAAK,GAAI,mBAAkB;MACjCrB,WAAW,CAAC0B,KAAK,EAAEjB,QAAQ,EAAEY,KAAK,CAAC;IACrC;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}