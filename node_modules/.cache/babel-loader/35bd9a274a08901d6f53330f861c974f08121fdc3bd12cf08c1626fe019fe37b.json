{"ast":null,"code":"/*\n *\n * Brand actions\n *\n */\n\nimport { goBack } from 'connected-react-router';\nimport { success } from 'react-notification-system-redux';\nimport axios from 'axios';\nimport { FETCH_BRANDS, FETCH_STORE_BRANDS, FETCH_BRAND, BRAND_CHANGE, BRAND_EDIT_CHANGE, SET_BRAND_FORM_ERRORS, SET_BRAND_FORM_EDIT_ERRORS, ADD_BRAND, REMOVE_BRAND, FETCH_BRANDS_SELECT, SET_BRANDS_LOADING, RESET_BRAND } from './constants';\nimport handleError from '../../utils/error';\nimport { formatSelectOptions } from '../../utils/select';\nimport { allFieldsValidation } from '../../utils/validation';\nimport { API_URL } from '../../constants';\nexport const brandChange = (name, value) => {\n  let formData = {};\n  formData[name] = value;\n  return {\n    type: BRAND_CHANGE,\n    payload: formData\n  };\n};\nexport const brandEditChange = (name, value) => {\n  let formData = {};\n  formData[name] = value;\n  return {\n    type: BRAND_EDIT_CHANGE,\n    payload: formData\n  };\n};\n\n// fetch store brands api\nexport const fetchStoreBrands = () => {\n  return async (dispatch, getState) => {\n    try {\n      const response = await axios.get(`${API_URL}/brand/list`);\n      dispatch({\n        type: FETCH_STORE_BRANDS,\n        payload: response.data.brands\n      });\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n\n// fetch brands api\nexport const fetchBrands = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({\n        type: SET_BRANDS_LOADING,\n        payload: true\n      });\n      const response = await axios.get(`${API_URL}/brand`);\n      dispatch({\n        type: FETCH_BRANDS,\n        payload: response.data.brands\n      });\n    } catch (error) {\n      handleError(error, dispatch);\n    } finally {\n      dispatch({\n        type: SET_BRANDS_LOADING,\n        payload: false\n      });\n    }\n  };\n};\n\n// fetch brand api\nexport const fetchBrand = brandId => {\n  return async (dispatch, getState) => {\n    try {\n      const response = await axios.get(`${API_URL}/brand/${brandId}`);\n      dispatch({\n        type: FETCH_BRAND,\n        payload: response.data.brand\n      });\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n\n// fetch brands select api\nexport const fetchBrandsSelect = () => {\n  return async (dispatch, getState) => {\n    try {\n      const response = await axios.get(`${API_URL}/brand/list/select`);\n      const formattedBrands = formatSelectOptions(response.data.brands, true);\n      dispatch({\n        type: FETCH_BRANDS_SELECT,\n        payload: formattedBrands\n      });\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n\n// add brand api\nexport const addBrand = () => {\n  return async (dispatch, getState) => {\n    try {\n      const rules = {\n        name: 'required',\n        description: 'required|max:200'\n      };\n      const brand = getState().brand.brandFormData;\n      const {\n        isValid,\n        errors\n      } = allFieldsValidation(brand, rules, {\n        'required.name': 'Name is required.',\n        'required.description': 'Description is required.',\n        'max.description': 'Description may not be greater than 200 characters.'\n      });\n      if (!isValid) {\n        return dispatch({\n          type: SET_BRAND_FORM_ERRORS,\n          payload: errors\n        });\n      }\n      const response = await axios.post(`${API_URL}/brand/add`, brand);\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n      if (response.data.success === true) {\n        dispatch(success(successfulOptions));\n        dispatch({\n          type: ADD_BRAND,\n          payload: response.data.brand\n        });\n        dispatch(goBack());\n        dispatch({\n          type: RESET_BRAND\n        });\n      }\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n\n// update brand api\nexport const updateBrand = () => {\n  return async (dispatch, getState) => {\n    try {\n      const rules = {\n        name: 'required',\n        slug: 'required|alpha_dash',\n        description: 'required|max:200'\n      };\n      const brand = getState().brand.brand;\n      const newBrand = {\n        name: brand.name,\n        slug: brand.slug,\n        description: brand.description\n      };\n      const {\n        isValid,\n        errors\n      } = allFieldsValidation(newBrand, rules, {\n        'required.name': 'Name is required.',\n        'required.slug': 'Slug is required.',\n        'alpha_dash.slug': 'Slug may have alpha-numeric characters, as well as dashes and underscores only.',\n        'required.description': 'Description is required.',\n        'max.description': 'Description may not be greater than 200 characters.'\n      });\n      if (!isValid) {\n        return dispatch({\n          type: SET_BRAND_FORM_EDIT_ERRORS,\n          payload: errors\n        });\n      }\n      const response = await axios.put(`${API_URL}/brand/${brand._id}`, {\n        brand: newBrand\n      });\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n      if (response.data.success === true) {\n        dispatch(success(successfulOptions));\n        dispatch(goBack());\n      }\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n\n// activate brand api\nexport const activateBrand = (id, value) => {\n  return async (dispatch, getState) => {\n    try {\n      const response = await axios.put(`${API_URL}/brand/${id}/active`, {\n        brand: {\n          isActive: value\n        }\n      });\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n      if (response.data.success === true) {\n        dispatch(success(successfulOptions));\n        const brand = getState().brand.brand;\n        dispatch(fetchBrand(brand._id));\n      }\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n\n// delete brand api\nexport const deleteBrand = id => {\n  return async (dispatch, getState) => {\n    try {\n      const response = await axios.delete(`${API_URL}/brand/delete/${id}`);\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n      if (response.data.success === true) {\n        dispatch(success(successfulOptions));\n        dispatch({\n          type: REMOVE_BRAND,\n          payload: id\n        });\n        dispatch(goBack());\n      }\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};","map":{"version":3,"names":["goBack","success","axios","FETCH_BRANDS","FETCH_STORE_BRANDS","FETCH_BRAND","BRAND_CHANGE","BRAND_EDIT_CHANGE","SET_BRAND_FORM_ERRORS","SET_BRAND_FORM_EDIT_ERRORS","ADD_BRAND","REMOVE_BRAND","FETCH_BRANDS_SELECT","SET_BRANDS_LOADING","RESET_BRAND","handleError","formatSelectOptions","allFieldsValidation","API_URL","brandChange","name","value","formData","type","payload","brandEditChange","fetchStoreBrands","dispatch","getState","response","get","data","brands","error","fetchBrands","fetchBrand","brandId","brand","fetchBrandsSelect","formattedBrands","addBrand","rules","description","brandFormData","isValid","errors","post","successfulOptions","title","message","position","autoDismiss","updateBrand","slug","newBrand","put","_id","activateBrand","id","isActive","deleteBrand","delete"],"sources":["D:/origin tribe/mern-ecommerce-master/client/src/containers/Brand/actions.js"],"sourcesContent":["/*\n *\n * Brand actions\n *\n */\n\nimport { goBack } from 'connected-react-router';\nimport { success } from 'react-notification-system-redux';\nimport axios from 'axios';\n\nimport {\n  FETCH_BRANDS,\n  FETCH_STORE_BRANDS,\n  FETCH_BRAND,\n  BRAND_CHANGE,\n  BRAND_EDIT_CHANGE,\n  SET_BRAND_FORM_ERRORS,\n  SET_BRAND_FORM_EDIT_ERRORS,\n  ADD_BRAND,\n  REMOVE_BRAND,\n  FETCH_BRANDS_SELECT,\n  SET_BRANDS_LOADING,\n  RESET_BRAND\n} from './constants';\n\nimport handleError from '../../utils/error';\nimport { formatSelectOptions } from '../../utils/select';\nimport { allFieldsValidation } from '../../utils/validation';\nimport { API_URL } from '../../constants';\n\nexport const brandChange = (name, value) => {\n  let formData = {};\n  formData[name] = value;\n\n  return {\n    type: BRAND_CHANGE,\n    payload: formData\n  };\n};\n\nexport const brandEditChange = (name, value) => {\n  let formData = {};\n  formData[name] = value;\n\n  return {\n    type: BRAND_EDIT_CHANGE,\n    payload: formData\n  };\n};\n\n// fetch store brands api\nexport const fetchStoreBrands = () => {\n  return async (dispatch, getState) => {\n    try {\n      const response = await axios.get(`${API_URL}/brand/list`);\n\n      dispatch({\n        type: FETCH_STORE_BRANDS,\n        payload: response.data.brands\n      });\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n\n// fetch brands api\nexport const fetchBrands = () => {\n  return async (dispatch, getState) => {\n    try {\n      dispatch({ type: SET_BRANDS_LOADING, payload: true });\n\n      const response = await axios.get(`${API_URL}/brand`);\n\n      dispatch({\n        type: FETCH_BRANDS,\n        payload: response.data.brands\n      });\n    } catch (error) {\n      handleError(error, dispatch);\n    } finally {\n      dispatch({ type: SET_BRANDS_LOADING, payload: false });\n    }\n  };\n};\n\n// fetch brand api\nexport const fetchBrand = brandId => {\n  return async (dispatch, getState) => {\n    try {\n      const response = await axios.get(`${API_URL}/brand/${brandId}`);\n\n      dispatch({\n        type: FETCH_BRAND,\n        payload: response.data.brand\n      });\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n\n// fetch brands select api\nexport const fetchBrandsSelect = () => {\n  return async (dispatch, getState) => {\n    try {\n      const response = await axios.get(`${API_URL}/brand/list/select`);\n\n      const formattedBrands = formatSelectOptions(response.data.brands, true);\n\n      dispatch({\n        type: FETCH_BRANDS_SELECT,\n        payload: formattedBrands\n      });\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n\n// add brand api\nexport const addBrand = () => {\n  return async (dispatch, getState) => {\n    try {\n      const rules = {\n        name: 'required',\n        description: 'required|max:200'\n      };\n\n      const brand = getState().brand.brandFormData;\n\n      const { isValid, errors } = allFieldsValidation(brand, rules, {\n        'required.name': 'Name is required.',\n        'required.description': 'Description is required.',\n        'max.description': 'Description may not be greater than 200 characters.'\n      });\n\n      if (!isValid) {\n        return dispatch({ type: SET_BRAND_FORM_ERRORS, payload: errors });\n      }\n\n      const response = await axios.post(`${API_URL}/brand/add`, brand);\n\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n\n      if (response.data.success === true) {\n        dispatch(success(successfulOptions));\n        dispatch({\n          type: ADD_BRAND,\n          payload: response.data.brand\n        });\n\n        dispatch(goBack());\n        dispatch({ type: RESET_BRAND });\n      }\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n\n// update brand api\nexport const updateBrand = () => {\n  return async (dispatch, getState) => {\n    try {\n      const rules = {\n        name: 'required',\n        slug: 'required|alpha_dash',\n        description: 'required|max:200'\n      };\n\n      const brand = getState().brand.brand;\n\n      const newBrand = {\n        name: brand.name,\n        slug: brand.slug,\n        description: brand.description\n      };\n\n      const { isValid, errors } = allFieldsValidation(newBrand, rules, {\n        'required.name': 'Name is required.',\n        'required.slug': 'Slug is required.',\n        'alpha_dash.slug':\n          'Slug may have alpha-numeric characters, as well as dashes and underscores only.',\n        'required.description': 'Description is required.',\n        'max.description': 'Description may not be greater than 200 characters.'\n      });\n\n      if (!isValid) {\n        return dispatch({ type: SET_BRAND_FORM_EDIT_ERRORS, payload: errors });\n      }\n\n      const response = await axios.put(`${API_URL}/brand/${brand._id}`, {\n        brand: newBrand\n      });\n\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n\n      if (response.data.success === true) {\n        dispatch(success(successfulOptions));\n\n        dispatch(goBack());\n      }\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n\n// activate brand api\nexport const activateBrand = (id, value) => {\n  return async (dispatch, getState) => {\n    try {\n      const response = await axios.put(`${API_URL}/brand/${id}/active`, {\n        brand: {\n          isActive: value\n        }\n      });\n\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n\n      if (response.data.success === true) {\n        dispatch(success(successfulOptions));\n\n        const brand = getState().brand.brand;\n        dispatch(fetchBrand(brand._id));\n      }\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n\n// delete brand api\nexport const deleteBrand = id => {\n  return async (dispatch, getState) => {\n    try {\n      const response = await axios.delete(`${API_URL}/brand/delete/${id}`);\n\n      const successfulOptions = {\n        title: `${response.data.message}`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n\n      if (response.data.success === true) {\n        dispatch(success(successfulOptions));\n        dispatch({\n          type: REMOVE_BRAND,\n          payload: id\n        });\n        dispatch(goBack());\n      }\n    } catch (error) {\n      handleError(error, dispatch);\n    }\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}