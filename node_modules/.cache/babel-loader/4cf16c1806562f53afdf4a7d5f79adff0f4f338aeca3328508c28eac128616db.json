{"ast":null,"code":"/*\n *\n * Signup actions\n *\n */\n\nimport { success } from 'react-notification-system-redux';\nimport axios from 'axios';\nimport { SIGNUP_CHANGE, SIGNUP_RESET, SET_SIGNUP_LOADING, SET_SIGNUP_SUBMITTING, SUBSCRIBE_CHANGE, SET_SIGNUP_FORM_ERRORS } from './constants';\nimport { setAuth } from '../Authentication/actions';\nimport setToken from '../../utils/token';\nimport handleError from '../../utils/error';\nimport { allFieldsValidation } from '../../utils/validation';\nimport { API_URL } from '../../constants';\nexport const signupChange = (name, value) => {\n  let formData = {};\n  formData[name] = value;\n  return {\n    type: SIGNUP_CHANGE,\n    payload: formData\n  };\n};\nexport const subscribeChange = () => {\n  return {\n    type: SUBSCRIBE_CHANGE\n  };\n};\nexport const signUp = () => {\n  return async (dispatch, getState) => {\n    try {\n      const rules = {\n        email: 'required|email',\n        password: 'required|min:6',\n        firstName: 'required',\n        lastName: 'required'\n      };\n      const newUser = getState().signup.signupFormData;\n      const isSubscribed = getState().signup.isSubscribed;\n      const {\n        isValid,\n        errors\n      } = allFieldsValidation(newUser, rules, {\n        'required.email': 'Email is required.',\n        'required.password': 'Password is required.',\n        'required.firstName': 'First Name is required.',\n        'required.lastName': 'Last Name is required.'\n      });\n      if (!isValid) {\n        return dispatch({\n          type: SET_SIGNUP_FORM_ERRORS,\n          payload: errors\n        });\n      }\n      dispatch({\n        type: SET_SIGNUP_SUBMITTING,\n        payload: true\n      });\n      dispatch({\n        type: SET_SIGNUP_LOADING,\n        payload: true\n      });\n      const user = {\n        isSubscribed,\n        ...newUser\n      };\n      const response = await axios.post(`${API_URL}/auth/register`, user);\n      const successfulOptions = {\n        title: `You have signed up successfully! You will be receiving an email as well. Thank you!`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n      localStorage.setItem('token', response.data.token);\n      setToken(response.data.token);\n      dispatch(setAuth());\n      dispatch(success(successfulOptions));\n      dispatch({\n        type: SIGNUP_RESET\n      });\n    } catch (error) {\n      const title = `Please try to signup again!`;\n      handleError(error, dispatch, title);\n    } finally {\n      dispatch({\n        type: SET_SIGNUP_SUBMITTING,\n        payload: false\n      });\n      dispatch({\n        type: SET_SIGNUP_LOADING,\n        payload: false\n      });\n    }\n  };\n};","map":{"version":3,"names":["success","axios","SIGNUP_CHANGE","SIGNUP_RESET","SET_SIGNUP_LOADING","SET_SIGNUP_SUBMITTING","SUBSCRIBE_CHANGE","SET_SIGNUP_FORM_ERRORS","setAuth","setToken","handleError","allFieldsValidation","API_URL","signupChange","name","value","formData","type","payload","subscribeChange","signUp","dispatch","getState","rules","email","password","firstName","lastName","newUser","signup","signupFormData","isSubscribed","isValid","errors","user","response","post","successfulOptions","title","position","autoDismiss","localStorage","setItem","data","token","error"],"sources":["D:/origin tribe/mern-ecommerce-master/client/src/containers/Signup/actions.js"],"sourcesContent":["/*\n *\n * Signup actions\n *\n */\n\nimport { success } from 'react-notification-system-redux';\nimport axios from 'axios';\n\nimport {\n  SIGNUP_CHANGE,\n  SIGNUP_RESET,\n  SET_SIGNUP_LOADING,\n  SET_SIGNUP_SUBMITTING,\n  SUBSCRIBE_CHANGE,\n  SET_SIGNUP_FORM_ERRORS\n} from './constants';\n\nimport { setAuth } from '../Authentication/actions';\nimport setToken from '../../utils/token';\nimport handleError from '../../utils/error';\nimport { allFieldsValidation } from '../../utils/validation';\nimport { API_URL } from '../../constants';\n\nexport const signupChange = (name, value) => {\n  let formData = {};\n  formData[name] = value;\n\n  return {\n    type: SIGNUP_CHANGE,\n    payload: formData\n  };\n};\n\nexport const subscribeChange = () => {\n  return {\n    type: SUBSCRIBE_CHANGE\n  };\n};\n\nexport const signUp = () => {\n  return async (dispatch, getState) => {\n    try {\n      const rules = {\n        email: 'required|email',\n        password: 'required|min:6',\n        firstName: 'required',\n        lastName: 'required'\n      };\n\n      const newUser = getState().signup.signupFormData;\n      const isSubscribed = getState().signup.isSubscribed;\n\n      const { isValid, errors } = allFieldsValidation(newUser, rules, {\n        'required.email': 'Email is required.',\n        'required.password': 'Password is required.',\n        'required.firstName': 'First Name is required.',\n        'required.lastName': 'Last Name is required.'\n      });\n\n      if (!isValid) {\n        return dispatch({ type: SET_SIGNUP_FORM_ERRORS, payload: errors });\n      }\n\n      dispatch({ type: SET_SIGNUP_SUBMITTING, payload: true });\n      dispatch({ type: SET_SIGNUP_LOADING, payload: true });\n\n      const user = {\n        isSubscribed,\n        ...newUser\n      };\n\n      const response = await axios.post(`${API_URL}/auth/register`, user);\n\n      const successfulOptions = {\n        title: `You have signed up successfully! You will be receiving an email as well. Thank you!`,\n        position: 'tr',\n        autoDismiss: 1\n      };\n\n      localStorage.setItem('token', response.data.token);\n\n      setToken(response.data.token);\n\n      dispatch(setAuth());\n      dispatch(success(successfulOptions));\n      dispatch({ type: SIGNUP_RESET });\n    } catch (error) {\n      const title = `Please try to signup again!`;\n      handleError(error, dispatch, title);\n    } finally {\n      dispatch({ type: SET_SIGNUP_SUBMITTING, payload: false });\n      dispatch({ type: SET_SIGNUP_LOADING, payload: false });\n    }\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}